"use strict";

var fittsTest = {

	// set experiment parameters here
	experimentParams: {
		minD: 100, maxD: 500, // min and max distance, in pixels
		minW: 30, maxW: 80,  // min and max target width, in pixels
		nTargets: 7, // number of targets in a trial
		nTrials: 3 // number of trials in an experiment
	},

	target: {x: 0, y: 0, r: 10},
	start: {x: 0, y: 0, t: 0},
	last: {},

	isoPositions: [],
	currentPosition: 0,
	currentCount: 0,
	totalCount: 0,
	miss: 0,
	
	isoParams: {nTargets: 5, distance: 200, width: 50},
	
	mousePath: [],
	active: false,
	
	data: [],
	
	sumID: 0,
	sumTime: 0,
	
	updateTimeoutHandle: undefined,

	startTest: function () {
		this.randomizeParams();
		this.updateISOCircles();		
	},

	endTest: function () {
		this.saveData();		
		alert('Make sure all the files have downloaded...');
		window.location.replace("thanks.html");
	},

	generateTarget: function() {
		this.target = this.isoPositions[this.currentPosition];
		this.target.distance = this.isoParams.distance;
		this.currentPosition = (this.currentPosition + Math.ceil(this.isoPositions.length/2)) % this.isoPositions.length;
		
		var target = testAreaSVG.selectAll('#target').data([this.target]);
		
		var insert = function(d) {
			d.attr('cx', function(d) { return d.x; })
			.attr('cy', function(d) { return d.y; })
			.attr('r', function(d) { return d.w / 2; });
		}

		target.enter()
			.append('circle')
				.attr('id', 'target')
				.style('fill', 'red')
				.call(insert);
									
		target.transition()
				.call(insert);

		
		this.active = true;
	},
	
	updateISOCircles: function() {
		this.currentCount = 0;
		
		this.generateISOPositions(this.isoParams.nTargets,
			this.isoParams.distance,
			this.isoParams.width);

		var circles = testAreaSVG.selectAll('circle').data(this.isoPositions);
		
		var insert = function(d) {
			d.attr('cx', function(d) { return d.x; })
			.attr('cy', function(d) { return d.y; })
			.attr('r', function(d) { return d.w / 2; });
		}

		circles.enter()
			.append('circle')
				.attr('class', 'iso')
				.call(insert);
									
		circles.transition()
			.call(insert);
		
		circles.exit()
			.transition()
				.attr('r', 0)
				.remove();
				
		this.currentPosition = 0;
		this.generateTarget();
		this.active = false;
},
	
	generateISOPositions: function(num, d, w) {		
				
		this.isoPositions = [];
		
		for (var i = 0; i < num; i++) {
			this.isoPositions[i] = {x: testDimension.cx + ((d/2) * Math.cos((2 * Math.PI * i) / num)),
				y: testDimension.cy + ((d/2) * Math.sin((2 * Math.PI * i) / num)),
				w: w};
		}
	},
	
	removeTarget: function() {
		testAreaSVG.selectAll('#target').data([])
			.exit()
				.remove();
				
		this.active = false;		
	},
	
	mouseClicked: function(x, y) {
		
		if (distance({ x: x, y: y }, this.target) < (this.target.w / 2)) {
			this.addDataPoint({
				trial_id: this.totalCount,
				start: this.start,
				target: this.target,			    
				hit: {x: x, y: y, t: (new Date).getTime()}});
			this.removeTarget();

			if (this.currentCount >= this.isoPositions.length) {
				this.totalCount++;
				if (this.totalCount >= this.experimentParams.nTrials) {

					this.endTest();

				} else {
					this.randomizeParams();
					this.currentCount = 0;
					this.currentPosition = 0;
					this.miss = 0;
					this.updateISOCircles();
					this.generateTarget();
					this.active = false;
				}
			}
			else {
				this.currentCount++;
				this.generateTarget();			
			}

			this.last = { t: (new Date).getTime(), x: x, y: y, target_id: this.currentCount, trial_id: this.totalCount  };
			this.start = this.last;
			this.mousePath.push(this.last);
		}
		else {
			this.miss++;
		}
	},
	
	mouseMoved: function(x, y) {
		if (this.active) {
			// skip if the mouse did actually not move
			// that should practically never happen...
			if (x == this.last.x && y == this.last.y) {
				return;
			}
			
			// set timeout for updating plots
			if (this.updateTimeoutHandle) {
				window.clearTimeout(this.updateTimeoutHandle);
			}
			this.updateTimeoutHandle = window.setTimeout(this.updatePlots, UPDATE_DELAY, this);		

			var newPoint = { t: (new Date).getTime(), x: x, y: y, target_id: this.currentCount, trial_id: this.totalCount };
			this.mousePath.push(newPoint);
				
			this.last = newPoint;
		}
	},
	
	addDataPoint: function(data) {
		// add point to data array
		if (this.active == false)
			return;

		this.data.push({
			trial_id: this.totalCount,
			target_id: this.currentCount,
			hit: data.hit,
			start: data.start,
			target: data.target				
		});	
	},
	
	randomizeParams: function () {
		this.isoParams.nTargets = this.experimentParams.nTargets;
		this.isoParams.distance = Math.floor(randomAB(this.experimentParams.minD, this.experimentParams.maxD));
		this.isoParams.width = Math.floor(randomAB(this.experimentParams.minW, this.experimentParams.maxW));

		this.updateISOCircles();
	},

	dataCSVstring: function () {
		var s = 'trial_id,target_id,start_x,start_y,start_t,hit_x,hit_y,hit_t,target_x,target_y,target_width\n';
				
		while (this.data.length > 0) {
			var trial = this.data.shift();
			s += trial.trial_id + ',' + trial.target_id + ','
				+ trial.start.x + ',' + trial.start.y + ',' + trial.start.t + ','
				+ trial.hit.x + ',' + trial.hit.y + ',' + trial.hit.t + ','
				+ trial.target.x + ',' + trial.target.y + ',' + trial.target.w 	+ '\n';			
        }
		
		return s;
	},

	pathCSVstring: function () {
		var s = 'trial_id,target_id,time,x,y\n';

		while (this.mousePath.length > 0) {
			var point = this.mousePath.shift();
			
			s += point.trial_id + ',' +
				point.target_id + ',' +
				point.t + ',' +
				point.x + ',' +
				point.y + '\n';			
		}

		return s;
	},

	downloadAsFile: function (s, fname) {
		var downloadAnchorNode = document.createElement('a');		
		downloadAnchorNode.setAttribute('href', 'data:text/json;charset=utf-8,' + encodeURIComponent(s));
		downloadAnchorNode.setAttribute('download', fname);
		document.body.appendChild(downloadAnchorNode); // required for firefox
		downloadAnchorNode.click();
		downloadAnchorNode.remove();
    },

	saveData: function() {
		var fileNameHeader = (new Date()).toISOString().replace(/:/g, '.').replace(/-/g, '.').replace(/T/, ' ').slice(0, -5) + 'UTC'; 

		this.downloadAsFile(this.dataCSVstring(), fileNameHeader + ' trial_data.csv');
		this.downloadAsFile(this.pathCSVstring(), fileNameHeader + ' path_data.csv');
		//this.downloadAsFile(JSON.stringify(this.data), fileNameHeader + 'fitts_data.json');

	},
};

/**
 * Create dimensions from the given values and store them for later use.
 * All values should be positive and make sense.
 * @param {number} width The outer width of the area.
 * @param {number} height The outer height of the area.
 * @param {number} top Margin form the top edge.
 * @param {number} right Margin form the right edge.
 * @param {number} bottom Margin form the bottom edge.
 * @param {number} left Margin form the left edge.
 */
function makeDimension(width, height, top, right, bottom, left) {
	return {
		width: width,
		height: height,
		innerWidth: width - (left + right),
		innerHeight: height - (top + bottom),
		top: top,
		right: right,
		bottom: bottom,
		left: left,
		cx: (width - (left + right)) / 2 + left,
		cy: (height - (top + bottom)) / 2 + top
	};
}

function randomAB(a, b) {
	return a + Math.random() * (b - a);
}

function mouseMoved() {
	var m = d3.svg.mouse(this);
	fittsTest.mouseMoved(m[0], m[1])
}

function mouseClicked() {
	var m = d3.svg.mouse(this);
	fittsTest.mouseClicked(m[0], m[1]);
}

function distance(a, b) {
	var dx = a.x - b.x;
	var dy = a.y - b.y;
	return Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
}

function bgRect(d, dim) {
	return d.append('rect')
		.attr('cx', 0)
		.attr('cy', 0)
		.attr('width', dim.width)
		.attr('height', dim.height)
		.attr('class', 'back');
}

// init code

// set up dimensions for the plotting.
var testDimension = makeDimension(800, 600, 30, 30, 30, 30);

var LIVE_STAY = 1000;
var MAX_TIME = 2000;
var UPDATE_DELAY = MAX_TIME;
var MAX_SPEED = 6; // pixel/ms

// init test area
var testAreaSVG = d3.select('#test-area').append('svg')
	.attr('width', testDimension.width)
	.attr('height', testDimension.height)
	.style('pointer-events', 'all')
    .on('mousemove', mouseMoved)
	.on('mousedown', mouseClicked)
	.call(bgRect, testDimension);

//start test
fittsTest.startTest()
